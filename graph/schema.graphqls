type Like {
    id: ID!
    userId: ID!
    beatId: ID!
}
type Beat {
    id: ID!
    creatorId: ID!
    title: String!
    genre: String!
    key: String!
    bpm: Int!
    tags: [String!]!
    s3Key: String!
    createdAt: Time!
}

type DeleteBeatResponse {
    message: String!
}

input CreateBeatInput {
    creatorId: ID!
    title: String!
    genre: String!
    key: String!
    bpm: Int!
    tags: [String!]!
}

input UpdateBeatInput {
    id: ID!
    title: String!
    genre: String!
    key: String!
    bpm: Int!
    tags: [String!]!
}

input DeleteBeatInput {
    id: ID!
}
type Mutation {
    # USER MUTATIONS
    createUser(input: CreateUserInput!): User!
    updateUser(input: UpdateUserInput!): User!
    deleteUser(input: DeleteUserInput!): DeleteUserResponse!


    # BEAT MUTATIONS
    createBeat(input: CreateBeatInput!): Beat!
    updateBeat(input: UpdateBeatInput!): Beat!
    deleteBeat(input: DeleteBeatInput!): DeleteBeatResponse!
}
scalar Time

type User {
    id: ID!
    username: String!
    password: String!
    email: String!
    beats: [Beat]!
    createdAt:  Time!
}

type DeleteUserResponse {
    message: String!
}

input CreateUserInput {
    username: String!
    password: String!
    email: String!
}

input UpdateUserInput {
    id: ID!
    username: String!
    password: String!
    email: String!
}

input DeleteUserInput {
    id: ID!
}
