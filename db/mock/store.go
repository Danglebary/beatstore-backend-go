// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/danglebary/beatstore-backend-go/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/danglebary/beatstore-backend-go/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateBeat mocks base method.
func (m *MockStore) CreateBeat(arg0 context.Context, arg1 db.CreateBeatParams) (db.Beat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBeat", arg0, arg1)
	ret0, _ := ret[0].(db.Beat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBeat indicates an expected call of CreateBeat.
func (mr *MockStoreMockRecorder) CreateBeat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBeat", reflect.TypeOf((*MockStore)(nil).CreateBeat), arg0, arg1)
}

// CreateLike mocks base method.
func (m *MockStore) CreateLike(arg0 context.Context, arg1 db.CreateLikeParams) (db.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLike", arg0, arg1)
	ret0, _ := ret[0].(db.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLike indicates an expected call of CreateLike.
func (mr *MockStoreMockRecorder) CreateLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLike", reflect.TypeOf((*MockStore)(nil).CreateLike), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteBeat mocks base method.
func (m *MockStore) DeleteBeat(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBeat", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBeat indicates an expected call of DeleteBeat.
func (mr *MockStoreMockRecorder) DeleteBeat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBeat", reflect.TypeOf((*MockStore)(nil).DeleteBeat), arg0, arg1)
}

// DeleteLike mocks base method.
func (m *MockStore) DeleteLike(arg0 context.Context, arg1 db.DeleteLikeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockStoreMockRecorder) DeleteLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockStore)(nil).DeleteLike), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// GetBeatById mocks base method.
func (m *MockStore) GetBeatById(arg0 context.Context, arg1 int32) (db.Beat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBeatById", arg0, arg1)
	ret0, _ := ret[0].(db.Beat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBeatById indicates an expected call of GetBeatById.
func (mr *MockStoreMockRecorder) GetBeatById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBeatById", reflect.TypeOf((*MockStore)(nil).GetBeatById), arg0, arg1)
}

// GetLikeByUserAndBeat mocks base method.
func (m *MockStore) GetLikeByUserAndBeat(arg0 context.Context, arg1 db.GetLikeByUserAndBeatParams) (db.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikeByUserAndBeat", arg0, arg1)
	ret0, _ := ret[0].(db.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikeByUserAndBeat indicates an expected call of GetLikeByUserAndBeat.
func (mr *MockStoreMockRecorder) GetLikeByUserAndBeat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikeByUserAndBeat", reflect.TypeOf((*MockStore)(nil).GetLikeByUserAndBeat), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockStore) GetUserById(arg0 context.Context, arg1 int32) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockStoreMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockStore)(nil).GetUserById), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// ListBeatsByBpmRange mocks base method.
func (m *MockStore) ListBeatsByBpmRange(arg0 context.Context, arg1 db.ListBeatsByBpmRangeParams) ([]db.Beat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBeatsByBpmRange", arg0, arg1)
	ret0, _ := ret[0].([]db.Beat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBeatsByBpmRange indicates an expected call of ListBeatsByBpmRange.
func (mr *MockStoreMockRecorder) ListBeatsByBpmRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBeatsByBpmRange", reflect.TypeOf((*MockStore)(nil).ListBeatsByBpmRange), arg0, arg1)
}

// ListBeatsByCreatorId mocks base method.
func (m *MockStore) ListBeatsByCreatorId(arg0 context.Context, arg1 db.ListBeatsByCreatorIdParams) ([]db.Beat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBeatsByCreatorId", arg0, arg1)
	ret0, _ := ret[0].([]db.Beat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBeatsByCreatorId indicates an expected call of ListBeatsByCreatorId.
func (mr *MockStoreMockRecorder) ListBeatsByCreatorId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBeatsByCreatorId", reflect.TypeOf((*MockStore)(nil).ListBeatsByCreatorId), arg0, arg1)
}

// ListBeatsByCreatorIdAndBpmRange mocks base method.
func (m *MockStore) ListBeatsByCreatorIdAndBpmRange(arg0 context.Context, arg1 db.ListBeatsByCreatorIdAndBpmRangeParams) ([]db.Beat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBeatsByCreatorIdAndBpmRange", arg0, arg1)
	ret0, _ := ret[0].([]db.Beat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBeatsByCreatorIdAndBpmRange indicates an expected call of ListBeatsByCreatorIdAndBpmRange.
func (mr *MockStoreMockRecorder) ListBeatsByCreatorIdAndBpmRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBeatsByCreatorIdAndBpmRange", reflect.TypeOf((*MockStore)(nil).ListBeatsByCreatorIdAndBpmRange), arg0, arg1)
}

// ListBeatsByCreatorIdAndGenre mocks base method.
func (m *MockStore) ListBeatsByCreatorIdAndGenre(arg0 context.Context, arg1 db.ListBeatsByCreatorIdAndGenreParams) ([]db.Beat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBeatsByCreatorIdAndGenre", arg0, arg1)
	ret0, _ := ret[0].([]db.Beat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBeatsByCreatorIdAndGenre indicates an expected call of ListBeatsByCreatorIdAndGenre.
func (mr *MockStoreMockRecorder) ListBeatsByCreatorIdAndGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBeatsByCreatorIdAndGenre", reflect.TypeOf((*MockStore)(nil).ListBeatsByCreatorIdAndGenre), arg0, arg1)
}

// ListBeatsByCreatorIdAndKey mocks base method.
func (m *MockStore) ListBeatsByCreatorIdAndKey(arg0 context.Context, arg1 db.ListBeatsByCreatorIdAndKeyParams) ([]db.Beat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBeatsByCreatorIdAndKey", arg0, arg1)
	ret0, _ := ret[0].([]db.Beat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBeatsByCreatorIdAndKey indicates an expected call of ListBeatsByCreatorIdAndKey.
func (mr *MockStoreMockRecorder) ListBeatsByCreatorIdAndKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBeatsByCreatorIdAndKey", reflect.TypeOf((*MockStore)(nil).ListBeatsByCreatorIdAndKey), arg0, arg1)
}

// ListBeatsByGenre mocks base method.
func (m *MockStore) ListBeatsByGenre(arg0 context.Context, arg1 db.ListBeatsByGenreParams) ([]db.Beat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBeatsByGenre", arg0, arg1)
	ret0, _ := ret[0].([]db.Beat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBeatsByGenre indicates an expected call of ListBeatsByGenre.
func (mr *MockStoreMockRecorder) ListBeatsByGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBeatsByGenre", reflect.TypeOf((*MockStore)(nil).ListBeatsByGenre), arg0, arg1)
}

// ListBeatsById mocks base method.
func (m *MockStore) ListBeatsById(arg0 context.Context, arg1 db.ListBeatsByIdParams) ([]db.Beat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBeatsById", arg0, arg1)
	ret0, _ := ret[0].([]db.Beat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBeatsById indicates an expected call of ListBeatsById.
func (mr *MockStoreMockRecorder) ListBeatsById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBeatsById", reflect.TypeOf((*MockStore)(nil).ListBeatsById), arg0, arg1)
}

// ListBeatsByKey mocks base method.
func (m *MockStore) ListBeatsByKey(arg0 context.Context, arg1 db.ListBeatsByKeyParams) ([]db.Beat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBeatsByKey", arg0, arg1)
	ret0, _ := ret[0].([]db.Beat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBeatsByKey indicates an expected call of ListBeatsByKey.
func (mr *MockStoreMockRecorder) ListBeatsByKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBeatsByKey", reflect.TypeOf((*MockStore)(nil).ListBeatsByKey), arg0, arg1)
}

// ListLikesByBeat mocks base method.
func (m *MockStore) ListLikesByBeat(arg0 context.Context, arg1 db.ListLikesByBeatParams) ([]db.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLikesByBeat", arg0, arg1)
	ret0, _ := ret[0].([]db.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLikesByBeat indicates an expected call of ListLikesByBeat.
func (mr *MockStoreMockRecorder) ListLikesByBeat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLikesByBeat", reflect.TypeOf((*MockStore)(nil).ListLikesByBeat), arg0, arg1)
}

// ListLikesByUser mocks base method.
func (m *MockStore) ListLikesByUser(arg0 context.Context, arg1 db.ListLikesByUserParams) ([]db.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLikesByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLikesByUser indicates an expected call of ListLikesByUser.
func (mr *MockStoreMockRecorder) ListLikesByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLikesByUser", reflect.TypeOf((*MockStore)(nil).ListLikesByUser), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// UpdateBeat mocks base method.
func (m *MockStore) UpdateBeat(arg0 context.Context, arg1 db.UpdateBeatParams) (db.Beat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBeat", arg0, arg1)
	ret0, _ := ret[0].(db.Beat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBeat indicates an expected call of UpdateBeat.
func (mr *MockStoreMockRecorder) UpdateBeat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBeat", reflect.TypeOf((*MockStore)(nil).UpdateBeat), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
