// Code generated by sqlc. DO NOT EDIT.
// source: like.sql

package db

import (
	"context"
)

const createLike = `-- name: CreateLike :one
INSERT INTO likes (
    user_id,
    beat_id
) VALUES (
    $1, $2
) RETURNING id, user_id, beat_id
`

type CreateLikeParams struct {
	UserID int32 `json:"user_id"`
	BeatID int32 `json:"beat_id"`
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, createLike, arg.UserID, arg.BeatID)
	var i Like
	err := row.Scan(&i.ID, &i.UserID, &i.BeatID)
	return i, err
}

const deleteLike = `-- name: DeleteLike :exec
DELETE FROM likes
WHERE user_id = $1 AND beat_id = $2
`

type DeleteLikeParams struct {
	UserID int32 `json:"user_id"`
	BeatID int32 `json:"beat_id"`
}

func (q *Queries) DeleteLike(ctx context.Context, arg DeleteLikeParams) error {
	_, err := q.db.ExecContext(ctx, deleteLike, arg.UserID, arg.BeatID)
	return err
}

const getLikeByUserAndBeat = `-- name: GetLikeByUserAndBeat :one
SELECT id, user_id, beat_id FROM likes
WHERE user_id = $1 AND beat_id = $2
LIMIT 1
`

type GetLikeByUserAndBeatParams struct {
	UserID int32 `json:"user_id"`
	BeatID int32 `json:"beat_id"`
}

func (q *Queries) GetLikeByUserAndBeat(ctx context.Context, arg GetLikeByUserAndBeatParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, getLikeByUserAndBeat, arg.UserID, arg.BeatID)
	var i Like
	err := row.Scan(&i.ID, &i.UserID, &i.BeatID)
	return i, err
}

const listLikesByBeat = `-- name: ListLikesByBeat :many
SELECT id, user_id, beat_id FROM likes
WHERE beat_id = $1
LIMIT $2
OFFSET $3
`

type ListLikesByBeatParams struct {
	BeatID int32 `json:"beat_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLikesByBeat(ctx context.Context, arg ListLikesByBeatParams) ([]Like, error) {
	rows, err := q.db.QueryContext(ctx, listLikesByBeat, arg.BeatID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Like{}
	for rows.Next() {
		var i Like
		if err := rows.Scan(&i.ID, &i.UserID, &i.BeatID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLikesByUser = `-- name: ListLikesByUser :many
SELECT id, user_id, beat_id FROM likes
WHERE user_id = $1
LIMIT $2
OFFSET $3
`

type ListLikesByUserParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListLikesByUser(ctx context.Context, arg ListLikesByUserParams) ([]Like, error) {
	rows, err := q.db.QueryContext(ctx, listLikesByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Like{}
	for rows.Next() {
		var i Like
		if err := rows.Scan(&i.ID, &i.UserID, &i.BeatID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
